<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ES6 Rocks</title>
        <link>http://es6rocks.com</link>
        <description>A website dedicated to teach all about ES6</description>
        <managingEditor>ES6 Rocks</managingEditor>
        <webMaster>ES6 Rocks</webMaster>
        <pubDate>Wed, 10 Sep 2014 02:21:11 GMT</pubDate>
        <language>en</language>
        <atom:link href="http://es6rocks.com/rss.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>What's next for JavaScript</title>
            <link>http://es6rocks.com/2014/08/what-is-next-for-javascript</link>
            <description><![CDATA[<p>If you&#39;re interested in ES6 you must follow <a href="https://twitter.com/rauschma">Dr. Axel Rauschmayer</a>.<br>He maintains the awesome <a href="http://www.2ality.com/">2ality</a> blog and writes a lot of good stuff around ES6.<br>In those slides, he cover a lot of new ES6 features and show us what we can expect for the future.  </p>
<script async class="speakerdeck-embed" data-id="4126347010d6013231af66d414c0f9a8" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>]]></description>
            <pubDate>Fri, 29 Aug 2014 03:04:03 GMT</pubDate>
            <guid>http://es6rocks.com/2014/08/what-is-next-for-javascript</guid>
        </item>
        
        <item>
            <title>What you need to know about block scope - let</title>
            <link>http://es6rocks.com/2014/08/what-you-need-to-know-about-block-scope-let</link>
            <description><![CDATA[<p>Variables declaration in any programming language are something pretty basic.<br>Regardless the language, understanding how variable scope works is essential to write any kind of program.<br>In Python, for example, as well as in most languages​​, there are two scopes: Local and Global.<br>Variables defined at the top of the file, without identation, are global scope variables.<br>Variables declared inside the function body are considered as local scope.<br>So far, everything is very similar. In JavaScript, the behavior is quite similar.<br>Let&#39;s see one example in both languages:  </p>
<pre><code class="lang-python"># Python
x = 1 # global scope
y = 3

def sum(a, b):
    s = a + b # local scope
    return s
</code></pre>
<pre><code class="lang-javascript">// JavaScript
var x = 1;  // global scope
var y = 3;

function sum(a, b) {
    var s = a + b;  // local scope
    return s;
}
</code></pre>
<p>In most C-based languages(JavaScript, PHP), variables are created at the spot where they were declared.<br>However, in JavaScrpt this is different, and can become complicated.<br>When you declare a variable in the body of a function, it is moved to the top or to the global scope. This behavior is called <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting"><em>hoisting</em></a>.<br>Unlike Python and other languages, in JavaScript, a variable declared in a for loop leaks its value.<br>See the example below:  </p>
<pre><code class="lang-javascript">// JavaScript
for (var i = 0; i &lt;= 2; i += 1) {
    console.log(i); // current i
}
console.log(i); // last i
</code></pre>
<p>In this case, even outside of the for loop block, the variable i is still there, with the last value stored.<br>This is a pretty common issue where a program can be easily broken by lack of attention.<br>Another important factor in JavaScript is that the omission of <em>var</em> to declare a variable causes it to be allocated in the global scope, and this can cause many problems.  </p>
<h2 id="let-declaration">let declaration</h2>
<p>The <em>let</em> arrives in ES6 as a substitute for <em>var</em>. Yes, the idea is that var will be discontinued in a distant future,  because today it would be impossible completely stop supporting it without breaking the whole internet.<br>The <em>let</em> works as expected, setting the variable in the place where it was declared.<br>Example:  </p>
<pre><code class="lang-javascript">let foo = true;
if  (foo) {
    let bar = &#39;baz&#39;;
    console.log(bar); // outputs &#39;baz&#39;
}

try {
    console.log(bar);
} catch (e) {
    console.log(&quot;bar doesn&#39;t exist&quot;);
}
</code></pre>
<p>As you might imagine, <em>let</em> solves the problem with the variable in the for loop.<br>See:  </p>
<pre><code class="lang-javascript">// JavaScript
for (let i = 0; i &lt;= 2; i += 1) {
    console.log(i); // current i
}
try {
    console.log(i);
} catch (e) {
    console.log(&quot;i doesn&#39;t exist&quot;);
}
</code></pre>
<h2 id="support-today">Support today</h2>
<p>You can use <em>let</em> today*<br>Check out the awesome Kangax ES6 table &gt; <a href="http://kangax.github.io/compat-table/es6/#">http://kangax.github.io/compat-table/es6/#</a>.<br><em>let</em> is currently supported by the modern browsers (even IE11) in theirs last versions and <a href="https://github.com/google/traceur-compiler">Traceur</a> as well.<br>You can try ES6 <em>let</em> on Firefox devtools:  </p>
<p><img src="/img/let.gif" alt="let on firefox nightly">  </p>
<ul>
<li><strong>NOTE</strong>: As well pointed by Michał Gołębiowski on the comments below, browsers implementations are not fully according with the spec, so you may find some bugs.<br>For real world applications, you&#39;ll need to use a traspiler (at least, for a while until mid 2015).  </li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Although simple, declaring variables in JavaScript can cause headache for beginners in the language.<br>With <em>let</em>, to declare variables is much more intuitive and consistent with a C-based language.<br>The use of <em>var</em> should be discontinued, and only the <em>let</em> must exist in the future.<br>There&#39;s no <em>hoisting</em> behavior for variables declared with <em>let</em>.  </p>
]]></description>
            <pubDate>Thu, 28 Aug 2014 01:58:23 GMT</pubDate>
            <guid>http://es6rocks.com/2014/08/what-you-need-to-know-about-block-scope-let</guid>
        </item>
        
        <item>
            <title>A new syntax for modules in ES6</title>
            <link>http://es6rocks.com/2014/07/a-new-syntax-for-modules-in-es6</link>
            <description><![CDATA[<p>TC39 - ECMAScript group is finishing the sixth version of ECMAScript specification. The <a href="http://www.2ality.com/2014/06/es6-schedule.html">group schedule</a> points to next June as the release date. By now, no significant differences may appear. It is time to deepen your knowledge into the subject.<br><!-- more -->
This post will not cover the importance of writing modular code. ES6 modules are already well displayed by websites like <a href="http://jsmodules.io">JavaScript Modules</a>, by far the best reference. The objective here is to clarify and justify the necessities of releasing a new syntax to write modules.</p>
]]></description>
            <pubDate>Fri, 11 Jul 2014 07:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/2014/07/a-new-syntax-for-modules-in-es6</guid>
        </item>
        
        <item>
            <title>ES6 interview with David Herman</title>
            <link>http://es6rocks.com/2014/07/es6-interview-with-david-herman</link>
            <description><![CDATA[<p>We did a nice interview with <a href="https://twitter.com/littlecalculist">David Herman</a> about his thoughts about ES6.
David is the principal researcher and founder of Mozilla Research, where he works to expand the foundations of the Open Web. He participates in a number of Web platform projects, including: <a href="http://taskjs.org/">task.js</a>, <a href="http://sweetjs.org/">sweet.js</a>, <a href="http://asmjs.org/">asm.js</a>, <a href="http://www.rust-lang.org/">Rust</a>, <a href="https://github.com/mozilla/servo/">Servo</a> and Parallel JS.</p>
]]></description>
            <pubDate>Fri, 04 Jul 2014 01:08:30 GMT</pubDate>
            <guid>http://es6rocks.com/2014/07/es6-interview-with-david-herman</guid>
        </item>
        
        <item>
            <title>Practical Workflows for ES6 Modules, Fluent 2014</title>
            <link>http://es6rocks.com/2014/05/practical-workflows-es6-modules</link>
            <description><![CDATA[<p><a href="https://twitter.com/guybedford">Guy Bedford</a> gave an awesome talk about a practical workflows with ES6 modules last month at Fluent Conf.<br>Also, he write up an article about it. If you are interested on this subject, you must read the full article.  </p>
]]></description>
            <pubDate>Tue, 27 May 2014 07:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/2014/05/practical-workflows-es6-modules</guid>
        </item>
        
        <item>
            <title>ECMAScript 6 - A Better JavaScript for the Ambient Computing Era</title>
            <link>http://es6rocks.com/2014/05/ecmascript-6-a-better-javascript-for-the-ambient-computing-era</link>
            <description><![CDATA[<p>Allen Wirfs-Brock (<a href="https://twitter.com/awbjs">awbjs</a> on Twitter) is a TC39 member. Actually, he is the &quot;Project Editor of the ECMAScript Language Specification&quot;.</p>
]]></description>
            <pubDate>Tue, 27 May 2014 06:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/2014/05/ecmascript-6-a-better-javascript-for-the-ambient-computing-era</guid>
        </item>
        
        <item>
            <title>ECMAScript 6 - The future is here</title>
            <link>http://es6rocks.com/2014/05/ecmascript-6-the-future-is-here</link>
            <description><![CDATA[<p>A talk by <a href="https://twitter.com/sebarmeli">Sebastiano Armeli</a> showing some of the ES6 features like scoping, generators, collections, modules and proxies.</p>
]]></description>
            <pubDate>Tue, 27 May 2014 05:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/2014/05/ecmascript-6-the-future-is-here</guid>
        </item>
        
        <item>
            <title>Hello World</title>
            <link>http://es6rocks.com/2014/05/hello-world</link>
            <description><![CDATA[<p>Hello everybody, welcome to ES6Rocks!<br>The mission here is to discuss about <a href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts">JavaScript&#39;s next version</a> , aka Harmony or ES.next.  </p>
]]></description>
            <pubDate>Sat, 17 May 2014 08:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/2014/05/hello-world</guid>
        </item>
        
    </channel>
</rss>
