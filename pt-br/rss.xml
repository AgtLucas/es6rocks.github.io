<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ES6 Rocks</title>
        <link>http://es6rocks.com</link>
        <description>A website dedicated to teach all about ES6</description>
        <managingEditor>ES6 Rocks</managingEditor>
        <webMaster>ES6 Rocks</webMaster>
        <pubDate>Wed, 10 Sep 2014 01:01:27 GMT</pubDate>
        <language>pt-br</language>
        <atom:link href="http://es6rocks.com/pt-br/rss.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>O que podemos esperar do novo JavaScript</title>
            <link>http://es6rocks.com/pt-br/2014/09/what-is-next-for-javascript</link>
            <description><![CDATA[<p>Se você está interessado em ES6, você deve seguir o <a href="https://twitter.com/rauschma">Dr. Axel Rauschmayer</a>.<br>Ele mantêm o incrível blog <a href="http://www.2ality.com/">2ality</a> e escreve uma série de coisas legais sobre ES6.<br>Nessa sua talk ele fala sobre várias novas features da ES6 e mostra o que podemos esperar do futuro.  </p>
<script async class="speakerdeck-embed" data-id="4126347010d6013231af66d414c0f9a8" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>]]></description>
            <pubDate>Fri, 29 Aug 2014 03:04:03 GMT</pubDate>
            <guid>http://es6rocks.com/pt-br/2014/09/what-is-next-for-javascript</guid>
        </item>
        
        <item>
            <title>O que você precisa saber sobre block scope - let</title>
            <link>http://es6rocks.com/pt-br/2014/09/what-you-need-to-know-about-block-scope-let</link>
            <description><![CDATA[<p>Declaração de variáveis em qualquer linguagem de programação é algo básico.<br>Independente da linguagem, entender o funcionamento do escopo de variáveis é imprescindível para escrever qualquer programa.<br>Em Python, por exemplo, assim como na maioria das linguagens, existem 2 escopos: Local e Global.<br>Variáveis definidas na raíz do arquivo, sem identação são variáveis de escopo Global.<br>Variáveis que são declaradas dentro do corpo de uma função são consideradas de escopo local.<br>Até aqui, tudo é muito parecido. No JavaScript o comportamente é bem semelhante.<br>Vejamos um exemplo nas 2 linguagens:  </p>
<pre><code class="lang-python"># Python
x = 1 # global scope
y = 3

def sum(a, b):
    s = a + b # local scope
    return s
</code></pre>
<pre><code class="lang-javascript">// JavaScript
var x = 1;  // global scope
var y = 3;

function sum(a, b) {
    var s = a + b;  // local scope
    return s;
}
</code></pre>
<p>Na maioria das linguagens baseadas em C (JavaScript, PHP), as variáveis são criadas no local onde foram declaradas.<br>Entretanto, no JavaScript isso é diferente, e pode se tornar complicado.<br>Ao declarar uma variável no corpo de uma função, a mesma é movida para o topo ou para o escopo global. Esse comportamento é chamado de <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting"><em>hoisting</em></a>.<br>Diferentemente de Python e outras linguagens, no JavaScript, uma variável declarada em um for loop acaba vazando o seu valor.<br>Veja no exemplo abaixo:  </p>
<pre><code class="lang-javascript">// JavaScript
for (var i = 0; i &lt;= 2; i += 1) {
    console.log(i); // current i
}
console.log(i); // last i
</code></pre>
<p>Neste caso, mesmo fora do bloco do for loop, a variável i ainda existe e com o último valor recebido no laço.<br>Este é um problema bem comum onde um programa pode ser facilmente quebrado por falta de atenção.  </p>
<p>Outro fator importante no JavaScript é que a omissão de <em>var</em> para declarar uma variável faz com que a mesma seja alocada no escopo global, e isso pode causar inúmeros problemas.  </p>
<h2 id="declara-o-let">Declaração let</h2>
<p>O <em>let</em> chega na ES6 como um substituto do <em>var</em>. Sim, a ideia é que var seja descontinuado em um futuro distante, pois hoje seria impossível não suporta-lo sem quebrar 100% da internet.<br>O <em>let</em> funciona como o esperado, definindo a variável no local onde ela foi declarada.<br>Exemplo:  </p>
<pre><code class="lang-javascript">let foo = true;
if  (foo) {
    let bar = &#39;baz&#39;;
    console.log(bar); // outputs &#39;baz&#39;
}

try {
    console.log(bar);
} catch (e) {
    console.log(&quot;bar doesn&#39;t exist&quot;);
}
</code></pre>
<p>Como você já deve imaginar, com <em>let</em> é possível resolver o problema com a variável no for loop.<br>Veja:  </p>
<pre><code class="lang-javascript">// JavaScript
for (let i = 0; i &lt;= 2; i += 1) {
    console.log(i); // current i
}
try {
    console.log(i);
} catch (e) {
    console.log(&quot;i doesn&#39;t exist&quot;);
}
</code></pre>
<h2 id="suporte-atual">Suporte atual</h2>
<p>Você pode usar <em>let</em> hoje*<br>Olhe a excelente tabela ES6 feita pelo Kangax &gt; <a href="http://kangax.github.io/compat-table/es6/#">http://kangax.github.io/compat-table/es6/#</a>.<br><em>let</em> é atualmente suporttado pelos browsers modernos(até no IE11) em suas últimas versões e no <a href="https://github.com/google/traceur-compiler">Traceur</a>.<br>Você pode brincar com ES6 <em>let</em> no Firefox devtools:  </p>
<p><img src="/img/let.gif" alt="let on firefox nightly">  </p>
<ul>
<li><strong>NOTA</strong>: Como bem apontado pelo Michał Gołębiowski nos comentários (do post em inglês <a href="http://es6rocks.com/2014/08/what-you-need-to-know-about-block-scope-let/#comment-1576757325">http://es6rocks.com/2014/08/what-you-need-to-know-about-block-scope-let/#comment-1576757325</a>), as implementações atuais dos browsers não estão totalmente de acordo com a especificação, então é possível encontrar alguns bugs.<br>Para aplicações do mundo real, você precisará utilizar um transpiler(pelo menos por enquanto, até o meio de 2015).  </li>
</ul>
<h2 id="conclus-o">Conclusão</h2>
<p>Apesar de simples, declarar variáveis no JavaScript pode causar dor de cabeça em iniciantes na linguagem.<br>Com o <em>let</em>, declarar variáveis fica muito mais intuítivo e coerente com uma linguagem baseada em C.<br>O uso do <em>var</em> deve ser descontinuado, e apenas o <em>let</em> deve existir no futuro.<br>Não existe o comportamento de <em>hoisting</em> para variáveis declaradas com <em>let</em>.  </p>
<h2 id="outras-refer-ncias">Outras referências</h2>
<p><a href="https://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations">https://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let</a><br><a href="http://odetocode.com/blogs/scott/archive/2014/07/31/the-features-of-es6-part-1-let.aspx">http://odetocode.com/blogs/scott/archive/2014/07/31/the-features-of-es6-part-1-let.aspx</a>  </p>
]]></description>
            <pubDate>Thu, 28 Aug 2014 01:58:23 GMT</pubDate>
            <guid>http://es6rocks.com/pt-br/2014/09/what-you-need-to-know-about-block-scope-let</guid>
        </item>
        
        <item>
            <title>Uma nova sintaxe para módulos na ES6</title>
            <link>http://es6rocks.com/pt-br/2014/09/a-new-syntax-for-modules-in-es6</link>
            <description><![CDATA[<p>O grupo TC39 - ECMAScript já está finalizando a sexta versão da especificação do ECMAScript. A <a href="http://www.2ality.com/2014/06/es6-schedule.html">agenda do grupo</a> aponta o mês de junho do próximo ano como sendo a data de lançamento. A partir de agora, poucas mudanças significativas devem surgir. Já é tempo de se aprofundar no estudo.</p>
<p>Este artigo não pretende abordar a importância da escrita de código modularizado. Já escrevi sobre o assunto no artigo <a href="http://tableless.com.br/modularizacao-em-javascript">Modularização em JavaScript</a>. Sites como <a href="http://jsmodules.io">JavaScript Modules</a> entre outros já são uma ótima referência sobre como escrever módulos ES6. A intenção aqui é esclarecer e justificar a necessidade de uma nova sintaxe para escrita de módulos.</p>
]]></description>
            <pubDate>Fri, 11 Jul 2014 07:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/pt-br/2014/09/a-new-syntax-for-modules-in-es6</guid>
        </item>
        
        <item>
            <title>Entrevista sobre ES6 com o David Herman</title>
            <link>http://es6rocks.com/pt-br/2014/09/es6-interview-with-david-herman</link>
            <description><![CDATA[<p>Fizemos uma entrevista bem legal com o <a href="https://twitter.com/littlecalculist">David Herman</a> sobre ES6.<br>Para quem não conhece, o David é o principal pesquisador e fundador da Mozilla Research, onde ele trabalha para expandir as fundações da Open Web. Ele está envolvido com diversos projetos de plataformas Web, incluindo <a href="http://taskjs.org/">task.js</a>, <a href="http://sweetjs.org/">sweet.js</a>, <a href="http://asmjs.org/">asm.js</a>, <a href="http://www.rust-lang.org/">Rust</a>, <a href="https://github.com/mozilla/servo/">Servo</a> e Parallel JS.  </p>
]]></description>
            <pubDate>Fri, 04 Jul 2014 01:08:30 GMT</pubDate>
            <guid>http://es6rocks.com/pt-br/2014/09/es6-interview-with-david-herman</guid>
        </item>
        
        <item>
            <title>Workflows para os módulos da ES6, Fluent 2014</title>
            <link>http://es6rocks.com/pt-br/2014/09/practical-workflows-es6-modules</link>
            <description><![CDATA[<p>O <a href="https://twitter.com/guybedford">Guy Bedford</a> deu um palestra incrível sobre workflows com módulos ES6 no último mês na Fluent Conf.
Ele também escreveu um artigo sonre isso. Se você está interessado neste assunto, você deve ler o artigo por completo.</p>
]]></description>
            <pubDate>Tue, 27 May 2014 07:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/pt-br/2014/09/practical-workflows-es6-modules</guid>
        </item>
        
        <item>
            <title>ECMAScript 6 - Um melhor JavaScript para a Ambient Computing Era</title>
            <link>http://es6rocks.com/pt-br/2014/09/ecmascript-6-a-better-javascript-for-the-ambient-computing-era</link>
            <description><![CDATA[<p>Allen Wirfs-Brock (<a href="https://twitter.com/awbjs">awbjs</a> no Twitter) é um membro do comitê TC39. Na verdade, ele é o &quot;Project Editor of the ECMAScript Language Specification&quot;, ou seja, editor chefe da ECMA.  </p>
]]></description>
            <pubDate>Tue, 27 May 2014 06:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/pt-br/2014/09/ecmascript-6-a-better-javascript-for-the-ambient-computing-era</guid>
        </item>
        
        <item>
            <title>ECMAScript 6 - O futuro está aqui</title>
            <link>http://es6rocks.com/pt-br/2014/09/ecmascript-6-the-future-is-here</link>
            <description><![CDATA[<p>Uma palestra do <a href="https://twitter.com/sebarmeli">Sebastiano Armeli</a> mostrando algumas features da ES6 como scoping, generators, collections, modules and proxies.  </p>
]]></description>
            <pubDate>Tue, 27 May 2014 05:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/pt-br/2014/09/ecmascript-6-the-future-is-here</guid>
        </item>
        
        <item>
            <title>Hello World</title>
            <link>http://es6rocks.com/pt-br/2014/09/hello-world</link>
            <description><![CDATA[<p>Olá pessoal, bem-vindos ao ES6Rocks!
Nossa missão aqui é discutir sobre a <a href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts">a nova versão do JavaScript</a>, mais conhecida como Harmony ou ES.next.</p>
]]></description>
            <pubDate>Sat, 17 May 2014 08:18:47 GMT</pubDate>
            <guid>http://es6rocks.com/pt-br/2014/09/hello-world</guid>
        </item>
        
    </channel>
</rss>
